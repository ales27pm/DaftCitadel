{
  "version": 1,
  "agents": [
    {
      "directory": ".",
      "title": "Repository-wide automation and contribution guidelines",
      "scope": "All files in the repository unless a more specific AGENTS.md overrides these rules.",
      "instructions": [
        "Follow strict TypeScript and React Native patterns; keep platform-specific code guarded behind runtime checks and prefer shared abstractions when possible.",
        "Before committing, run `npm run lint`, `npm run test`, `npm run typecheck`, and `npm run prettier` to keep the project production-ready.",
        "Preserve cross-platform support for iOS and Android, relying only on public APIs and approved tooling for network diagnostics research.",
        "Document user-facing behavior and developer workflows in the `docs/` directory when introducing notable changes.",
        "Run `npm run manage:agents` at the end of each session so that generated AGENTS.md files stay synchronized with `agents.config.json`.",
        "Placeholders, stubs, mocks, incomplete or simplified code is not allowed. Only refine full working logic and code will be accepted."
      ],
      "notes": [
        "This file is maintained automatically by `scripts/manageAgents.js`; edit `agents.config.json` instead of modifying AGENTS.md manually.",
        "Nested AGENTS.md files may extend these rules but must not weaken repository-wide quality or security guarantees."
      ]
    },
    {
      "directory": "docs",
      "title": "Documentation authoring guidelines",
      "scope": "Content within docs/ that explains architecture, runbooks, or operational procedures.",
      "instructions": [
        "Keep documentation actionable and up to date with the implementation; update relevant sections when behavior changes.",
        "Prefer Markdown with clear headings, ordered lists for procedures, and link to source modules using relative paths when providing references.",
        "Include platform-specific caveats (iOS, Android, desktop tooling) where applicable to network diagnostics features.",
        "Validate code snippets before publishing and annotate prerequisites such as required CLI tools or entitlements."
      ],
      "notes": [
        "Architectural diagrams or binary assets should live under docs/assets/ with descriptive filenames if needed.",
        "Cross-link documentation sections to avoid duplication whenever multiple files describe the same subsystem."
      ]
    },
    {
      "directory": "src",
      "title": "Source code conventions",
      "scope": "All TypeScript source files unless a nested AGENTS.md adds more specific instructions.",
      "instructions": [
        "Write strongly typed modules with explicit interfaces and avoid using `any`; add shared types under `src/session/models.ts` or a dedicated types module when necessary.",
        "Log recoverable errors with contextual information and ensure fatal paths bubble up exceptions for higher-level handling.",
        "Co-locate unit tests under `__tests__` directories and keep them deterministic; mock native modules when interacting with platform APIs.",
        "Prefer dependency-injected helpers over singletons to maintain testability and modular design.",
        "Update telemetry or analytics integrations consistently across platforms when introducing new capture or diagnostics features."
      ],
      "notes": [
        "Runtime feature flags should be centralized to maintain predictable behavior across mobile platforms.",
        "Use `Platform.select` or similar utilities for platform branching instead of littering checks throughout business logic."
      ]
    },
    {
      "directory": "src/audio",
      "title": "Audio engine module guidance",
      "scope": "The audio engine abstractions and related utilities housed in src/audio/.",
      "instructions": [
        "Keep the TypeScript interfaces synchronized with the native bridge definitions in `NativeAudioEngine.ts`; validate payload shapes with runtime guards where feasible.",
        "Ensure automation routines remain idempotent and avoid blocking operations on the JS thread when driving native audio components.",
        "Add high-signal Jest coverage for scheduling, buffer management, and error handling paths inside `src/audio/__tests__/`.",
        "Document timing-sensitive assumptions directly in code comments and surface debug logging hooks for troubleshooting audio drift.",
        "Coordinate changes with session management so that audio state transitions remain atomic across reconnects or failures."
      ],
      "notes": [
        "When adding new native capabilities, capture the Objective-C/Swift or Kotlin implementation details in docs/ with entitlement requirements.",
        "Prefer pure functions or lightweight classes for orchestration logic to simplify deterministic testing."
      ]
    },
    {
      "directory": "src/session",
      "title": "Session management guidance",
      "scope": "Session lifecycle orchestration, persistence, and history management code under src/session/.",
      "instructions": [
        "Keep serialization logic backward compatible; introduce explicit version gates in `serialization.ts` when schema changes are required.",
        "Record meaningful analytics or diagnostics events for significant session state transitions while avoiding sensitive data exposure.",
        "Model domain entities with dedicated TypeScript types in `models.ts` and re-export them through the package index for reuse.",
        "Guarantee storage adapters remain interchangeable by adhering to the shared interface defined in `storage/index.ts`.",
        "Accompany new functionality with Jest tests under `src/session/__tests__/` or a closer nested test directory covering success and failure modes."
      ],
      "notes": [
        "When integrating with external services, wrap I/O with cancellation-aware utilities to keep session teardown responsive.",
        "Use dependency injection for clock or network abstractions to facilitate deterministic simulations."
      ]
    },
    {
      "directory": "src/session/storage",
      "title": "Session storage adapters",
      "scope": "Persistent storage implementations that back session state in src/session/storage/.",
      "instructions": [
        "Ensure each adapter honors the contract exported by `index.ts`, including atomic writes and deterministic failure semantics.",
        "Prefer streaming or chunked operations when reading large payloads to avoid blocking the JS event loop.",
        "Provide graceful fallbacks for unsupported platforms (e.g., omit SQLite on web) and surface actionable error messages.",
        "Write integration-style Jest tests that simulate common persistence scenarios using temporary directories or in-memory mocks.",
        "Document migration procedures within the module when storage schemas evolve."
      ],
      "notes": [
        "When adding native-backed adapters, ensure platform entitlements and permissions are captured in docs/ along with build steps.",
        "Avoid leaking implementation-specific exceptions; translate them to the shared error vocabulary exposed to session consumers."
      ]
    }
  ],
  "autoRules": [
    {
      "directory": "src",
      "depth": 1,
      "exclude": ["__tests__"],
      "template": {
        "title": "Module defaults for {{directoryName}}",
        "scope": "Files under {{relativePath}} inherit these defaults unless a deeper AGENTS.md overrides them.",
        "instructions": [
          "Adhere to the repository-wide quality gates defined in the root AGENTS.md.",
          "Document any new platform interactions introduced within {{relativePath}} and ensure they remain cross-platform safe.",
          "Add focused Jest coverage under {{relativePath}}/__tests__/ for each new code path.",
          "Prefer composable utilities and dependency injection so that the {{directoryName}} module remains testable."
        ],
        "notes": [
          "Generated automatically from agents.config.json. Update the template rather than editing this file directly."
        ]
      }
    }
  ]
}
